<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Privy]]></title>
  <link href="http://codeprivy.com/atom.xml" rel="self"/>
  <link href="http://codeprivy.com/"/>
  <updated>2014-07-13T21:02:52-04:00</updated>
  <id>http://codeprivy.com/</id>
  <author>
    <name><![CDATA[Joel Taylor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capybara and Vagrant]]></title>
    <link href="http://codeprivy.com/blog/2014/07/13/capybara-and-vagrant/"/>
    <updated>2014-07-13T20:22:06-04:00</updated>
    <id>http://codeprivy.com/blog/2014/07/13/capybara-and-vagrant</id>
    <content type="html"><![CDATA[<p>Here&#8217;s a quick-tip for Vagrant users:</p>




<p>One of my favorite tools that Capybara has to offer is <code>save_and_open_page</code>
for those times when you&#8217;re left wondering where exactly your fictional user ended up.
Unfortunately, when using a VM without a GUI, there&#8217;s no browser to open the page in.
</p>




<p>Luckily, there&#8217;s a really simple workaround. In your test helper add
<code>Capybara.save_and_open_page_path = "/vagrant/debug_pages"</code> and the
page will now be saved as HTML in your /vagrant directory. Of course, you can name
the holding directory anything you want. In your tests you&#8217;ll  need to use <code>save_page</code>
to avoid the browser error and find the page saved in your specified directory.</p>




<p>Keep on keeping vagrant up.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails With Vagrant]]></title>
    <link href="http://codeprivy.com/blog/2014/07/01/rails-with-vagrant/"/>
    <updated>2014-07-01T12:09:07-04:00</updated>
    <id>http://codeprivy.com/blog/2014/07/01/rails-with-vagrant</id>
    <content type="html"><![CDATA[<p>Vagrant makes setting up a development environment simple. Even more, the environments
can be shared to reduce any compatibility issues with a user&#8217;s personal setup.
More often than not, when I clone a project, I have to spend a good deal of time
getting all the components of a project to work with my setup. I&#8217;m a fan of cloning
a project, running <code>vagrant up</code> and getting started immediately. Vagrant
is the golden sandbox that has me a bit too thrilled.</p>




<p>The folks at JumpstartLab put out an excellent
<a href="http://tutorials.jumpstartlab.com/topics/vagrant_setup.html">tutorial</a> on
getting Vagrant setup with all the basic necessities. One issue I continued to run
into though was a language error with Postgres when trying to run
<code>rake db:create </code>. The error read:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PG::InvalidParameterValue: ERROR:  encoding UTF8 does not match locale en_US
</span><span class='line'>DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1.
</span><span class='line'>: CREATE DATABASE "platform_validator_development" ENCODING = 'utf8'
</span></code></pre></td></tr></table></div></figure>
</p>


<p>
This tends to happen when the locale isn&#8217;t set before creating a database instance
inside vagrant. Digging deeper into the issue, the
<a href="http://www.postgresql.org/docs/8.2/static/locale.html">Postgres doc</a> states:
<blockquote><p>&#8220;Note that the locale behavior of the server is determined by the environment variables seen by the server, not by the<br/>environment of any client. Therefore, be careful to configure the correct locale<br/>settings before starting the server.&#8221;</p></blockquote>
</p>


<p>
The peculiar thing about Ubuntu is that when you execute<code>sudo apt-get install postgresql libpq-dev</code>
it starts the service immediately and thus sets the locale to Latin1 (at least for the precise32 box).
Therefore, it&#8217;s best practice to run
<code>sudo /usr/sbin/update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8</code>
before even installing Postgres. Note, you&#8217;ll need to run <code>vagrant provision </code> to
see the locale change.
</p>




<p>
Another solution, regardless of using Vagrant or not, is to update the template of
your database instance. This can be done by running the following:

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su postgres
</span><span class='line'>psql
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>update pg_database set datistemplate=false where datname='template1';
</span><span class='line'>drop database Template1;
</span><span class='line'>create database template1 with owner=postgres encoding='UTF-8'
</span><span class='line'>lc_collate='en_US.utf8' lc_ctype='en_US.utf8' template template0;
</span><span class='line'>update pg_database set datistemplate=true where datname='template1';</span></code></pre></td></tr></table></div></figure>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Caching]]></title>
    <link href="http://codeprivy.com/blog/2014/06/29/mobile-caching/"/>
    <updated>2014-06-29T14:09:26-04:00</updated>
    <id>http://codeprivy.com/blog/2014/06/29/mobile-caching</id>
    <content type="html"><![CDATA[<p><p>A client reported a <em>bug</em> when using their iPad to navigate their site.
When the user selects a page from the dropdown mobile navigation and then presses
&ldquo;Back&rdquo; they return to the previous page with the navigation menu still open. I tried
to replicate the issue on my iPhone (4s) with no luck but when I ran the iPad simulator
in Xcode I was able to replicate it.<p></p>

<p><p>I never experienced this sort of behavior before but then again, when testing sites,
I don&rsquo;t always navigate backwards. My first attempt was to hide the navigation on page
load but the event wouldn&rsquo;t trigger on the iPad.</p></p>

<p><p>It turns out that many mobile devices use <a href="https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching">back-forward cache</a>
to decrease load time. In order to cause the page to reload as opposed to serving the
cached page you can use this javascript : </p></p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">onpageshow</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">persisted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span> <span class="c1">//remove the occasional page flash</span>
</span><span class='line'>      <span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>Of course, this method is a bit backwards as I don&rsquo;t really need to reload the
entire page. Instead, I can just resort back to hiding the navigation to take
advantage of the page caching.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap-sass]]></title>
    <link href="http://codeprivy.com/blog/2014/06/19/bootstrap-sass/"/>
    <updated>2014-06-19T18:59:40-04:00</updated>
    <id>http://codeprivy.com/blog/2014/06/19/bootstrap-sass</id>
    <content type="html"><![CDATA[<p>I use Bootstrap so that I can focus on developing as opposed to designing. It&#8217;s
all fun and games till your entire layout breaks for &#8220;no reason&#8221;.</p>




<p>I was experimenting with different versions of Bootstrap-sass and ended up using
version 3.1.1. Despite having run
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle update</span></code></pre></td></tr></table></div></figure>
and restarting the server,
my app was using the wrong version of Bootstrap (v.2.1.2).</p>




<p>Simple fix. Shut down the server and run:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake tmp:clear</span></code></pre></td></tr></table></div></figure></p>




<p>I&#8217;m a bit ashamed it took me more than 5 minutes to figure this out.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goal Time]]></title>
    <link href="http://codeprivy.com/blog/2014/05/27/goal-time/"/>
    <updated>2014-05-27T14:49:47-04:00</updated>
    <id>http://codeprivy.com/blog/2014/05/27/goal-time</id>
    <content type="html"><![CDATA[<p>I&#8217;ve spent the past five months living in Thailand. Now that I&#8217;ve returned
to the land of fast internet and robust coffee beans, it&#8217;s time to move forward with
my Ruby on Rails agenda. To motivate myself, I&#8217;ve decided to set a high goal and
establish a game plan to meet that goal. As a freelancer, it&#8217;s my duty to self-motivate
and challenge myself to become a better developer. There&#8217;s a lot of directions to
be taken in the world of web development and goals will help to choose a path instead
of being scattered in numerous technologies with zero mastery.</p>




<h3>The goal</h3>


<p><a href="http://hashrocket.com/">Hashrocket</a> doesn&#8217;t know it yet but I&#8217;m
going to be an apprentice with them in the near future.</p>




<h3>The reason</h3>


<p>They&#8217;re a progressive company and are the type of team I can see myself in.
They subscribe to agile methodologies and practice pair-programming. It&#8217;s a place
where I know I&#8217;d be challenged, taught, humbled, and involved in some cutting edge
development. A major spotlight is their active contribution to the open source
community.</p>


<p>Needless to say, I&#8217;m a fan.</p>




<h3>The plan</h3>




<p>Hashrocket provides the following requirements for an apprentice:</p>




<ul>
  <li>Passion for developing excellent software</li>
  <li>Basic knowledge of Ruby and Rails</li>
  <li>Enthusiasm about pairing and other Agile practices</li>
  <li>You MUST be able to work full-time at one of our offices</li>
</ul>




<p>Special consideration is given to those who:</p>




<ul>
  <li>Experience test driving application development</li>
  <li>Previous consulting experience</li>
  <li>Open source contributions</li>
  <li>Familiarity with Vim</li>
  <li>Agile (especially pair-programming) experience</li>
</ul>




<p>After finding out all I could about the apprenticeship I came across a
<a href="http://www.youtube.com/watch?v=SGzB-LOwEmQ">video,</a> by Hashrocket, stating
that all employees see the applications and if you&#8217;re declined they&#8217;ll tell you
why. They welcome people to improve and submit applications again - I&#8217;ve already
reasoned that I&#8217;ll be submitting till I get accepted.</p>




<p>Here is what I&#8217;ll be doing in the next couple weeks before I submit my application:</p>


<ul>
  <li>Aim to read a new book each week (those related to Ruby, Rails, Agile development, etc)</li>
  <li>Devote at least 5 hours a week to an open source project</li>
  <li>Keep the blog rolling with what I&#8217;m learning</li>
  <li>Develop and deploy some apps (do my best to TDD them as well)</li>
  <li>Use Vim to develop from here on</li>
</ul>




<p>I should probably stock up on coffee.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basis of the Blog]]></title>
    <link href="http://codeprivy.com/blog/2014/05/06/the-causation-of-blogging/"/>
    <updated>2014-05-06T10:27:29-04:00</updated>
    <id>http://codeprivy.com/blog/2014/05/06/the-causation-of-blogging</id>
    <content type="html"><![CDATA[<p>When I started my first development job, I was advised by another developer to
start a blog and document what I was learning. At the time, it seemed like a novel
idea but it wasn&#8217;t exactly pertinent to my scenario. Being new to development, most
of my time was spent in a chaotic bustle to absorb as much content as possible.
I have two reasons for blogging &#8211; one personal and the other community oriented. First,
writing has always been a vehicle to better process my thoughts. Second, I&#8217;ve benefited
from the blogs of other developers on numerous occasions and want to give back.
I&#8217;ll explain.</p>




<p>It&#8217;s been said numerous times that you don&#8217;t really know something unless you
can effectively teach it. I&#8217;m not aiming to write an introductory course to Ruby
but I do hope to share knowledge and challenge myself to understand all the components
enough to explain them thoroughly. As much as I like being able to copy and paste
a solution from Stack Overflow, in the end, it&#8217;s much more beneficial to understand
why things work the way they do. Writing is a form of processing that takes all
my scattered thoughts and makes them coherent. It&#8217;s my hope the blog will serve
as a resource to improve my understanding as I progress.</p>




<p>Recently, I sat down to get started on a freshly cloned Rails project and
couldn&#8217;t get the project&#8217;s gems to install. Some foreign error wasn&#8217;t allowing me
to proceed and I spent roughly 2 hours trying all sorts of debugging.
After swallowing my pride, I ran to Google with the error and found that other
developers had experienced, as well as solved, the error I was burdened by.
Point blank, I benefit from the thoughts and knowledge of other developers and
feel inclined to give back. In a sense, it&#8217;s my way of giving back to the
community so that it can continue to be furthered and improved.</p>




<p>With that said, I hope my code snippets can save someone else some time as
well as increase my understanding of the code at hand. </p>




<p>Here&#8217;s to better coding.</p>

]]></content>
  </entry>
  
</feed>
